group ByteCode;

program(global_variables, functions, program, programName) ::= <<
.class public <programName>
.super java/lang/Object
  <global_variables>
  <functions>
	<program>
>>

mainBlock(block) ::= <<
.method public static main([Ljava/lang/String;)V
.limit locals 100
.limit stack 20
  <block; separator="\n">
  return
.end method
>>

global_declaration(ident, type) ::=<<
.field private static <ident>field <type> <\n>
>>

declaration_int(counter) ::= <<
ldc 0
istore <counter>
>>

declaration_string(counter) ::= <<
ldc ""
astore <counter>
>>

declaration_char(counter) ::= <<
bipush 0
istore <counter>
>>

functions(type, ident, args, returnType, block) ::=<<
.method public static <ident>(<args:{<it.type>}>)<type>
.limit locals 100
.limit stack 20
  <block; separator="\n">
  <returnType>
.end method
>>

parameter(type, ident) ::= "<type> <ident>"

function_call(programName, funcName, argTemplates, argTypes, returnType) ::=<<
<argTemplates; separator="\n">
invokestatic <programName>/<funcName>(<argTypes>)<returnType>
>>

assign_var_int(expression, counter) ::= <<
<expression>
istore <counter>
>>

assign_field_int(expression, programName, fieldName) ::= <<
<expression>
putstatic <programName>/<fieldName>field I
>>

assign_var_char(expression, counter) ::= <<
<expression>
istore <counter>
>>

assign_field_char(expression, programName, fieldName) ::= <<
<expression>
putstatic <programName>/<fieldName>field C
>>

assign_var_string(expression, counter) ::= <<
<expression>
astore <counter>
>>

assign_field_string(expression, programName, fieldName) ::= <<
<expression>
putstatic <programName>/<fieldName>field Ljava/lang/String; 
>>

add_string(firstValue, secondValue) ::= <<
new java/lang/StringBuilder
dup
<firstValue>
invokestatic java/lang/String.valueOf(Ljava/lang/Object;)Ljava/lang/String;
invokespecial java/lang/StringBuilder.\<init\>(Ljava/lang/String;)V
<secondValue>
invokevirtual java/lang/StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder;
invokevirtual java/lang/StringBuilder.toString()Ljava/lang/String;
>>

add_int(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
iadd 
>>

sub_int(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
isub 
>>

referenceVariable_int(counter) ::= <<
iload <counter>
>>

referenceField_int(programName, fieldName) ::= <<
getstatic <programName>/<fieldName>field I
>>

referenceVariable_string(counter) ::= <<
aload <counter>
>>

referenceField_string(programName, fieldName) ::= <<
getstatic <programName>/<fieldName>field Ljava/lang/String;
>>

referenceVariable_char(counter) ::= <<
iload <counter>
>>

referenceField_char(programName, fieldName) ::= <<
getstatic <programName>/<fieldName>field C
>>

read_var_int(counter) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextInt()I
istore <counter>
>>

read_field_int(programName, fieldName) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextInt()I
putstatic <programName>/<fieldName>field I
>>

read_field_string(programName, fieldName) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextLine()Ljava/lang/String;
putstatic <programName>/<fieldName>field Ljava/lang/String;
>>

read_var_string(counter) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextLine()Ljava/lang/String;
astore <counter>
>>

write_string(string) ::=<<
getstatic java/lang/System/out Ljava/io/PrintStream;
<string>
invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
>>

write_int(expression) ::=<<
getstatic java/lang/System/out Ljava/io/PrintStream;
<expression>
invokevirtual java/io/PrintStream/println(I)V
>>

write_char(string) ::=<<
getstatic java/lang/System/out Ljava/io/PrintStream;
<string>
invokevirtual java/io/PrintStream/println(C)V
>>

length_string(string) ::= <<
<string>
invokevirtual java/lang/String.length()I
>>

int_to_string(value) ::= <<
new java/lang/Integer
dup
<value>
invokenonvirtual java/lang/Integer/\<init\>(I)V
invokevirtual java/lang/Integer.toString()Ljava/lang/String;
>>

char_to_string(value) ::= <<
new java/lang/Character
dup
<value>
invokenonvirtual java/lang/Character/\<init\>(C)V
invokevirtual java/lang/Character.toString()Ljava/lang/String;
>>


elem_in_string(fValue, sValue) ::=<<
new java/lang/String
dup
<fValue>
invokenonvirtual java/lang/String/\<init\>(Ljava/lang/String;)V
<sValue>
invokevirtual java/lang/String.charAt(I)C
>>

const_int(value) ::=<<
ldc <value>
>>

const_string(value) ::=<<
ldc <value>
>>

const_char(cod) ::=<<
bipush <cod>
>>


return_int() ::= <<
ireturn
>>

return_void() ::= <<
return
>>

return_string() ::= <<
areturn
>>

return_char() ::=<<
ireturn
>>

type_int() ::= "I"
type_string() ::= "Ljava/lang/String;"
type_void() ::="V"
type_char() ::="C"
