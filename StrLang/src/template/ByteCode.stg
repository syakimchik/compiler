group ByteCode;

program(global_variables, functions, program, programName) ::= <<
.class public <programName>
.super java/lang/Object
  <global_variables>
  <functions>
	<program>
>>

mainBlock(block) ::= <<
.method public static main([Ljava/lang/String;)V
.limit locals 100
.limit stack 20
  <block; separator="\n">
  return
.end method
>>

global_declaration(ident, type) ::=<<
.field private static <ident>field <type> <\n>
>>

declaration_int(counter) ::= <<
ldc 0
istore <counter>
>>

declaration_string(counter) ::= <<
ldc ""
astore <counter>
>>

functions(type, ident, args, returnType, block) ::=<<
.method public static <ident> func(<args:{<it.type>}>) <type>
.limit locals 100
.limit stack 20
  <block; separator="\n">
  <returnType>
.end method
>>

parameter(type, ident) ::= "<type> <ident>"

function_call(programName, funcName, argTemplates, argTypes, returnType) ::=<<
<argTemplates; separator="\n">
invokestatic <programName>/<funcName>func(<argTypes>) <returnType>
>>

assign_var_int(expression, counter) ::= <<
<expression>
istore <counter>
>>

assign_field_int(expression, programName, fieldName) ::= <<
<expression>
putstatic <programName>/<fieldName>field I
>>

assign_var_string(expression, counter) ::= <<
<expression>
astore <counter>
>>

assign_field_string(expression, programName, fieldName) ::= <<
<expression>
putstatic <programName>/<fieldName>field Ljava/lang/String; 
>>

referenceVariable_int(counter) ::= <<
iload <counter>
>>

referenceField_int(programName, fieldName) ::= <<
getstatic <programName>/<fieldName>field I
>>

referenceVariable_string(counter) ::= <<
aload <counter>
>>

referenceField_string(programName, fieldName) ::= <<
getstatic <programName>/<fieldName>field Ljava/lang/String;
>>

read_var_int(counter) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextInt()I
istore <counter>
>>

read_field_int(programName, fieldName) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextInt()I
putstatic <programName>/<fieldName>field I
>>

read_field_string(programName, fieldName) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextLine()Ljava/lang/String;
putstatic <programName>/<fieldName>field Ljava/lang/String;
>>

read_var_string(counter) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextLine()Ljava/lang/String;
astore <counter>
>>

write_string(string) ::=<<
getstatic java/lang/System/out Ljava/io/PrintStream;
<string>
invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
>>

write_int(expression) ::=<<
getstatic java/lang/System/out Ljava/io/PrintStream;
<expression>
invokevirtual java/io/PrintStream/println(I)V
>>

const_int(value) ::=<<
ldc <value>
>>

const_string(value) ::=<<
ldc <value>
>>

return_int() ::= <<
ireturn
>>

return_void() ::= <<
return
>>

return_string() ::= <<
areturn
>>

type_int() ::= "I"
type_string() ::= "S"
type_void() ::="V"
